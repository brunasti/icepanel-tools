@startuml
'https://plantuml.com/class-diagram
' CONVERT ICEPANEL DIAGRAM ===========
' Converter          : it.brunasti.icepanel.tools.IcePanelToPlantUmlConverter
' IcePanel JSON File : [./examples/ml/ml-001.json]
' Configuration      : [./examples/ml/config.json]
' Generated at       : Wed Apr 17 11:06:08 CEST 2024

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml



System_Boundary(BoNLOPSR4qOFGuDfePUN, "CommerceTools" ) {
    ' CLASSES =======
    Component(iihE1V4k7JDKwrS5GunC, "CommerceTools System", "CommerceTools is cloud-native, headless commerce APIs that gives company control over e-commerce\nfuture, enabling to create game-changing features and functionality and consistently deliver modern shopping\nexperiences while retaining agility, scalability and performance." )
    Component(MRgvJ9ygR2wFH6SewIIW, "Mollie - Notification Module - Mourice", "The Notification module is a publicly exposed service which receives asynchronous notifications sent\nby Mollie.\n\nThrough notifications, Mollie provides asynchronous payment status changes like\nauthorized, captured, or refunded.\n\nThe notification module will process the notification sent by Mollie and\nmatch the commercetools payment for this notification, and modify commercetools payment accordingly." )
    Component(03XCn8Gai9J6GFDmJFfJ, "Mollie  - API Extension - Julian", "Extend the behavior of an API with your business logic.\n\nThe commercetools Composable Commerce APIs\nprovide default data structures and default behavior that is useful for many customers. However, each Project\nhas its unique requirements. Similar to data structures that can be customized with [Custom\nTypes](https://docs.commercetools.com/api/projects/types) and [Product Types](https://docs.commercetools.com/api/projects/productTypes), additional behavior can be added.\nFor behavior to be executed within a short\ntimeframe, [Subscriptions](https://docs.commercetools.com/api/projects/subscriptions) can be used. For behavior that needs to be executed before the API call succeeds, API Extensions can be\nused.\n\nGood use cases for API Extensions are: Validating the content of a Cart (for example no more than 8 crates\nof beverages can be ordered at once), calculating custom shipping costs, or adding mandatory items, like\ninsurance, to a Cart.\n\nAn API Extension gets called after the processing of a create or update request of an\nAPI call, but before the result is persisted. The API Extension can validate the object, or\napply [additional updates](https://docs.commercetools.com/api/projects/api-extensions#updates-requested) to it.\n\n##" )
}


' NEIGHBOR CLASSES =======
ContainerDb(eM0PYHq5PJCIHkPU0lIQ, "extension-module.zip", "", "" )
Person(zT1BIuiGKsOS5Iyzaz4n, "Seller", "" )
ContainerDb(xeYjkZ3SYUESS7DQqtOp, "notification-module.zip", "", "" )
ContainerDb(HGU1rfF8iaCD4IQNbzTG, "Env Variable - CT_MOLLIE_CONFIG", "", "" )


' CONNECTIONS =======
Rel(xeYjkZ3SYUESS7DQqtOp, MRgvJ9ygR2wFH6SewIIW, "Deployment" )
Rel(eM0PYHq5PJCIHkPU0lIQ, 03XCn8Gai9J6GFDmJFfJ, "Deployment" )
Rel(iihE1V4k7JDKwrS5GunC, zT1BIuiGKsOS5Iyzaz4n, "Send messages" )
Rel(HGU1rfF8iaCD4IQNbzTG, MRgvJ9ygR2wFH6SewIIW, "Configure" )


@enduml
